### 更多操作符-区间 映射

操作符和动作是vim里最重要的两个概念，也是vim高效率的最重要的原因之一。我们接下来会定义更多的动作，因为扩展这个功能会让vim变得更加功能强大。

假设你在用Markdown写一些文档。如果你从来没有用过Markdown，没关系，我们这里的示例非常简单。把下面的文本输入到vim里的文件里：
<pre><code>
    Topic One
     =========

     This is some text about topic one.

     It has multiple paragraphs.

     Topic Two
     =========

     This is some text about topic two.  It has only one paragraph.
</code></pre>

在Markdown里，用“=”做为下划线的字符都会被当做标题来处理的。我们来创建一个映射，让我们对标题做一些操作。运行下面的命令：
`:onoremap  ih :<c-u>execute "normal! ?^==+$\r:nohlsearch\rkvg_"<cr>`

这个映射比较复杂，所以我们先试试这个命令，把光标放在一个段落里，不要放在标题上，然后输入cih。Vim会删除你选择的章节的标题，然后保持在insert模式里。

这里使用了一些我们没有学习过的东西，所以我们分开来看看它们。第一部分:onoremap ih 只是一个我们之前见过的映射命令，可以直接跳过。同样的，我们继续暂时跳过<c-u>。

现在我们继续看看剩下的内容:
`:execute "normal! ?^==\\+$\r:nohlsearch\rkvg_"<cr>`

### Normal

Normal会执行输入的命令，就向在normal模式下输入命令一样，运行下面的命令
`:normal gg`

Vim会把光标移动到文件的开始处。现在运行下面的命令：
`:normal >>`

Vim将会格式化当前行。
     
在我们的映射里，我们在normal命令后面加了一个‘!’，这样的话，vim就不会使用已经存在的任何映射，如果只是单独的normal的话，已经存在的映射是有效的。

:normal!和normal的关系就像nnoremap和nmap一样。你要记住的是尽量用:normal!，原因和尽量用nnoremap一样，具体原因前面已经讲过了。

### Execute

execute命令可以把一个字符串当做命令来执行。运行下面的命令：
`:execute "write"`

Vim会把当前的文件写入，就像输入了:write命令一样，现在运行下面的命令：
`:execute "normal！ gg"`

Vim会运行“normal! gg”命令，也就是移动光标到文本的开始处。但是我们可以直接用normal!命令，为什么还要用execute呢？
     
运行下面的命令，猜猜它的作用是什么：
`:normal! gg/a<cr>`

看起来它的功能是：

- 移动到文本的开始处
- 开始一个搜索
- 填入“a”作为搜索的目标
- 按回车键进行搜索

但是结果是，vim会移动到文本的开始处，但是什么也不会做！
     
问题就在于normal!命令不是识别像“<cr>”之类的特殊字符。有很多方法可以解决这个问题，不过最简单的是用execute。

当execute执行你输入的命令时，它会首先对特殊字符进行替换。在这里，\r是一个特殊字符，它代码换行。双斜杠也是一个转义字符串，它表示一个斜杠。

如果我们在映射里执行上面的替换，然后看看替换后的结果，我们就会明白这个映射的作用了：
<pre><code>
     :normal! ?^==\+$<cr>:nohlsearch<cr>kvg_
                               ^^^^
                                | | | |
                   这四个字符表示换行符
</code></pre>

这样的话normal!将会只想这个命令，就像在normal模式里输入一样。现在让我们把这个命令分解一下，来看看它的作用究竟是什么：
<pre><code>
     ?^==\+$
     :nohlsearch
     kvg_
</code></pre>

第一部分，?^==\+$是一个反向搜索的命令，它查找任何只包含两个会两个以上等号的文本行。然后让光标停留在等号行的第一个字符上。

我们做反向搜索是因为我们要修改一个段落的标题，你只是要修改你选择的章节的标题而不是下一个章节的标题。

第二部分:nohlsearch，这个命令只是清除搜索的高亮显示，所以不必关系。

最后一部分是一个3个normal命令的组合：

- k：向上移动一行。因为我们之前在等号行的头一个字符上，所以现在我们移动到了标题栏的第一个字符上。
- v：进入visual模式。
- g_：移动到当前行的第一个非空格字符上。我们不是使用$，因为$会高亮新行符，所以不用它。

### 结果

这个分析的过程还是比较复杂的，现在我们再看看各个部分。然后再简单概括一下：

我们创建了一个操作符-区间 映射来修改一个章节的标题。

我们用execute和normal!命令来执行选择标题的normal命令，并且在命令里支持特殊字符。

我们的映射搜索标题的标识符——等号行，然后在visual模式下选中标题文本

然后Vim会处理剩下的内容
          
我们再继续看看几个映射。运行下面的命令：
`:onoremap ah :<c-u>execute "normal! ?^==\\+\r:nohlsearch\rg_vk0"<cr>`

试试这个映射，在一个章节里输入cah。这次vim会把标题文本和等号行都删除了。你可以把这个功能认为是删除标题。

那这两个映射有什么关系呢？我们来比较一下：
`:onoremap ih :<c-u>execute "normal! ?^==\\+$\r:nohlsearch\rkvg_"<cr>`
`:onoremap ah :<c-u>execute "normal! ?^==\\+$\r:nohlsearch\rg_vk0"<cr>`
     
这两个命令的区别只在最后一段，也就是我们选择文本的地方
<pre><code>
     kvg_
     g_vk0
<code></pre>

因为其他的地方都是一样的，所以我们从光标移动到等号行的第一个字符开始分析：

- g_：移动到当前行的最后一个非空格符上
- v：进入visual模式
- k：向上移动一行，这样我们就进入了标题的文本行
- 0：移动到当前行的第一个字符上

 结果就是等号行和标题文本行都被选中了，然后vim会对着两行进行操作。

 ### 练习

- Markdown里也有标题是用“-”来标识的，修改上面的正则表达式，来让映射对两种格式的映射都起作用。也许你需要看看:help  pattern-overview。记住正则表达式是在字符串里表示的，所以要对斜杠进行转义。
- 把上面的两个映射加入到你的vimrc文件里。要保证它们在合适的缓存里，同时要保证它定义在一个分组里，以免每次vimrc文件被加载的时候都重复定义命令。
- 阅读:help normal。
-  阅读:help execute
- 阅读:help expr-quote来看看可用的转义符。
